{"version":3,"sources":["StarRating.jsx","PostDetails.jsx","Post.jsx","ScrollableBlog.jsx","App.js","serviceWorker.js","index.js"],"names":["StarRating","this","props","rating","React","Component","PostDetails","details","title","date","Post","content","text","ScrollableBlog","state","posts","postsJSX","map","post","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNAEqBA,E,uKAEb,OACI,6BACI,4BAAKC,KAAKC,MAAMC,QAAU,W,GAJFC,IAAMC,WCCzBC,E,uKAEb,OAAQ,6BACJ,4BAAKL,KAAKC,MAAMK,QAAQC,OAAS,YACjC,4BAAKP,KAAKC,MAAMK,QAAQE,MAAQ,eAChC,kBAAC,EAAD,CAAYN,OAAQF,KAAKC,MAAMK,QAAQJ,c,GALVC,IAAMC,WCA1BK,E,uKAEb,OAAQ,6BACA,kBAAC,EAAD,CAAaH,QAASN,KAAKC,MAAMS,QAAQJ,UACzC,2BAAIN,KAAKC,MAAMS,QAAQC,MACvB,6BACA,kC,GANkBR,IAAMC,WCAnBQ,E,kDACjB,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CAETC,MAAO,CACH,CACIR,QAAS,CACLC,MAAO,kBACPC,KAAM,YACNN,OAAQ,eAEZS,KAAM,oBAEV,CACIL,QAAS,CACLC,MAAO,mBACPC,KAAM,eACNN,OAAQ,aAEZS,KAAM,sBAEV,CACIL,QAAS,CACLC,MAAO,kBACPC,KAAM,eACNN,OAAQ,cAEZS,KAAM,iBA3BH,E,qDAkCf,IAAMI,EAAWf,KAAKa,MAAMC,MAAME,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMP,QAASO,OAC7D,OACI,6BAAMF,O,GArC0BZ,IAAMC,W,MCWnCc,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ed29c762.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class StarRating extends React.Component {\n    render() {\n        return (\n            <div>\n                <h6>{this.props.rating || '5!'}</h6>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport StarRating from './StarRating';\n\nexport default class PostDetails extends React.Component {\n    render() {\n        return (<div>\n            <h3>{this.props.details.title || 'OR TITLE'}</h3>\n            <h6>{this.props.details.date || 'TODAY IDIOT'}</h6>\n            <StarRating rating={this.props.details.rating} />\n        </div>)\n    }\n}","import React from 'react';\nimport PostDetails from './PostDetails';\n\nexport default class Post extends React.Component {\n    render() {\n        return (<div>\n                <PostDetails details={this.props.content.details}/>\n                <p>{this.props.content.text}</p>\n                <br />\n                <hr />\n            </div>)\n    }\n}","import React from 'react';\nimport Post from './Post';\n\nexport default class ScrollableBlog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // look here for model to follow\n            posts: [\n                {\n                    details: {\n                        title: 'First blog post',\n                        date: 'Dec 01 01',\n                        rating: '4.5 I guess'\n                    },\n                    text: 'I am a new post!'\n                },\n                {\n                    details: {\n                        title: 'Second blog post',\n                        date: 'Dec 02 02 02',\n                        rating: '3 I guess'\n                    },\n                    text: 'Get over yourself!'\n                },\n                {\n                    details: {\n                        title: 'Third blog post',\n                        date: 'Dec 03 03 03',\n                        rating: '-1 I guess'\n                    },\n                    text: 'bleep bloop'\n                }\n            ]\n        }\n    }\n\n    render() {\n        const postsJSX = this.state.posts.map(post => <Post content={post} />)\n        return (\n            <div>{postsJSX}</div>\n        );\n    }\n} ","import React from 'react';\nimport ScrollableBlog from './ScrollableBlog';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ScrollableBlog />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}